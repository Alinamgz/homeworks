/*
ДОГОВОРЕННОСТЬ: на данном этапе считаем что на всем макете используется один единственный шрифт без засечек,
Прием использовался исключительно в демонстрационных целях чтобы показать КАК НЕ НАДО
по этому мы определяем его для тэга, снутри которого содержится ВЕСЬ контент страницы.
В ресльной жизни лучше обернуть весь контент в еще один блок и его присваивать подобные стили. НА BODY НЕ ВЕШЕМ НИЧЕГО.
*/
body {
    font-family: sans-serif; /*задаем шрифт без засечек. Интерпретатор браузера сам найдет в сисеме первый подходящий*/
    margin: 0; /*обнуляем базовые внешние отступы документа в браузере*/
    padding: 0; /*обнуляем базовые внутренние отступы документа в браузере*/
}

/*стили блока-обертки, внутри которого сожержатся текстовые елементы первого блока макета*/
.container{
    width: 1280px;
    margin: 0 auto;
}
.basic-block{
    padding: 50px 0;
    text-align: center;
}
.head-block{
    background-image: url("../img/Layer 21@1X.png"); /*свойство отвечает за картинку фона елемента, путь к ней указывается в кавычках в функции url(). Путь указваестя ОТНОСИТЕЛЬНЫЙ*/
    background-repeat: no-repeat; /*свойство отвечает за повторение фона. Если размера картинки не достаточно для заполнения елемента она будет/не будет дублироваться еще раз*/
    background-size: cover; /*свойство отвечает за характер заполнения елемента фоном. значение cover значит что фон будет автоматически соблюдая пропорции всегда заполнять весь елемент*/
    /*ВНУТРЕННИЕ ОТСТУПЫ
    для чего они нам тут? Для того, чтобы контент:
    1 - располагался в нижней части блока на фиксированном растоянии
    2 - фиксированный отступ от левого края
    3 - фиксированный отступ от последнего вложенного елемента до нижней границы

    таким образом мы создаем некую рамку, внутри котоой сможет размещаться контент.
    При этом рамка не фиксированная по высоте, т.е. каждый новый дочерний елемент просто увеличит высоту родительского и ничего на странице не поплывет.
    */
    padding-top: 530px;
    padding-left: 190px;
    padding-bottom: 145px;
    /*Свойство цвета таекста наследуется дочерними елементами, по этому чтобы не указывать его в каждом дочернем, определяем его один раз в родительском*/
    color: #fff;
}

/*стили заголовка верхнего блока страницы*/
.head-block-title{
    font-size: 48px; /*свойство отвечает за размер шрифта. можно указывать как в пикселях так и в других доступных в рамках css единицах измерения. Где мы взяли это значение - на макете загруженном в сервис по его раслоению на слои и получения стилей*/
    font-weight: 700;
    text-transform: uppercase; /*свойство отвечает за трансформацию текста. значение uppercase сделает все буквы в елементе большими вне зависимости от того как она были введены изначально*/
    margin-top: 0; /*обнуляем стандартный браузерный верхний отступ заголовка*/
    margin-bottom: 15px; /*добавляем нужный нам отступ до следующего елемента*/
}

/*стили подзаголовка верхнего блока страницы*/
.head-block-subtitle{
    margin: 0 0 25px; /*переопределяем оступы елемента согласно полученным значениям из макета*/
    font-size: 18px; /*переопределяем значение размера шрифта согласно полученному из макета значению*/
}

/*стили для слогана, который на верхнем блоке страницы с полупрозрачноым фоном в тонкой белой рамке*/
.head-block-slogan {
    font-size: 54px; /*переопределяем значение размера шрифта согласно полученному из макета значению*/
    font-weight: 700;
    text-transform: uppercase; /*свойство отвечает за трансформацию текста. значение uppercase сделает все буквы в елементе большими вне зависимости от того как она были введены изначально*/
    /*для того, чтобы создать некий блок внутри которого будет текст можно не создавать дополнительную вложенность елементов, а ивпользовать внешние отступы. Они разширят фактическое занимаемое елементом место, по этому цвет фона потом применится на все занимаемое елементом место*/
    padding: 45px 30px;
    /*так как изначально елемент занимает всю ширину родительского елемента, а нам нужно чтобы он занимал ширину контента - меняем знаение свойства отобрадения на inline-block*/
    display: inline-block;

    background-color:rgba(0, 0, 0, 0.5); /*свойство отвечает за цвет фона, как значение ему можно присвоить функцию rgba(),
  которая принимает 4 параметра. Первые три  - цвет в системе rgba, четвертый - прозрачность от 0 до 1, где 0 - полностью прозрачный*/

    border: 1px white solid; /*так как на макете есть едва заметная рамка - задаем ее и тут. Свойство отвечает за стили рамки елемента.
  указываем три значение в любом порядке - размер рамки, цвет и хаарктер рамки(цельная, пунктирная и т.д.) */
}

/*так как между словом we и остальным текстом расстояние больше чем обычный пробел, а слово we и без того уже
обернуто в строчный елемент, можем присвоить ему второй класс, который будет отвечать только за этот отступ.
Это нормально так как класс yellow-text штука универсальная и будет использоваться по всему документу
для переопределения цвета разных частей текста, чтобы его не "засорять" еще одним свойство создаем отдельный класс*/
.slogan-margin {
    margin-right: 50px;
}

/*универсальный класс для переопределения цвета текста в желтый из макета*/
.yellow-text {
    color: #f1ad1d;
}
.basic-title{
    color: #333333;
    font-size: 22px;
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: 50px;
}
.basic-subtitle{
    font-weight: 700;
}
.orange-line{
    margin-top: 50px;
    border: 2px solid #f1b128;
    width: 60px;
}
.navbar-logo {
    display: inline-block;
    vertical-align: middle;
    width: 10%;
    color: #f1b128;
    font-size: 36px;
    font-weight: 700;
}
nav.container{
    text-transform: uppercase;
}
.navbar-menu{
    display:inline-block;
    width: 89%;
    text-align: right;
    list-style: n one;
}
.navbar-menu-item{
    display: inline-block;
}
.navbar-menu-link{
    text-decoration: none;
    font-size: 18px;
    color: #333333;
}